import os
import asyncio
import pytz
import tzlocal
import logging
import sys
import json
from datetime import datetime

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º tzlocal –¥–ª—è Europe/Kiev
tzlocal.get_localzone = lambda: pytz.timezone("Europe/Kiev")

def patched_astimezone(tz):
    if tz is None:
        return None
    if not isinstance(tz, pytz.BaseTzInfo):
        try:
            if isinstance(tz, str):
                return pytz.timezone(tz)
            if hasattr(tz, 'key'):
                return pytz.timezone(tz.key)
            return pytz.timezone(str(tz))
        except Exception as e:
            raise TypeError('Only timezones from the pytz library are supported') from e
    return tz

import apscheduler.util
apscheduler.util.astimezone = patched_astimezone

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

from aiohttp import web

print("–ë–æ—Ç –ø—Ä–∞—Ü—é—î...")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = "7747992449:AAEqWIUYRlhbdiwUnXqCYV3ODpNX9VUsed8"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
CHAT_ID = "2045410830"            # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –±–æ–Ω—É—Å-—Å—á—ë—Ç—á–∏–∫–æ–≤ (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏)
bonus_counters = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
def get_next_order_number():
    try:
        with open("order_counter.txt", "r", encoding="utf-8") as f:
            num = int(f.read().strip())
    except FileNotFoundError:
        num = 0
    num += 1
    with open("order_counter.txt", "w", encoding="utf-8") as f:
        f.write(str(num))
    return num

# ===================== –•–µ–Ω–¥–ª–µ—Ä—ã Telegram ======================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start ‚Äì –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å WebApp."""
    user = update.effective_user
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{now}] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.full_name} (ID: {user.id}) –≤–∏–∫–ª–∏–∫–∞–≤ /start")

    greeting_text = (
        "üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Septic24!\n\n"
        "–ú–∏ –Ω–∞–¥–∞—î–º–æ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ –ø–æ—Å–ª—É–≥–∏ –∑ –≤–∏–∫–∞—á—É–≤–∞–Ω–Ω—è –≤–∏–≥—Ä—ñ–±–Ω–∏—Ö —è–º, —Å–µ–ø—Ç–∏–∫—ñ–≤, –∫–∞–Ω–∞–ª—ñ–∑–∞—Ü—ñ–π "
        "—Ç–∞ –≤—É–ª–∏—á–Ω–∏—Ö —Ç—É–∞–ª–µ—Ç—ñ–≤ –ø–æ –≤—Å—ñ–π –£–∫—Ä–∞—ó–Ω—ñ.\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ –º—ñ–Ω—ñ‚Äë–¥–æ–¥–∞—Ç–æ–∫ —ñ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:"
    )
    
    web_app_url = "https://applabua.github.io/Septic24service/?user_id=" + str(user.id)
    keyboard = [[InlineKeyboardButton("–ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É‚ôªÔ∏è", web_app=WebAppInfo(url=web_app_url))]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    photo_url = "https://i.ibb.co/BH3bjrPP/IMG-9356.jpg"
    if update.message:
        await update.message.reply_photo(photo=photo_url, caption=greeting_text, reply_markup=reply_markup)

async def orders_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /orders ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)."""
    if update.effective_user.id != int(CHAT_ID):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω—å.")
        return
    try:
        with open("orders.txt", "r", encoding="utf-8") as f:
            content = f.read()
        if not content.strip():
            content = "–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å –ø–æ—Ä–æ–∂–Ω—è."
    except FileNotFoundError:
        content = "–§–∞–π–ª –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    await update.message.reply_text(content)

async def webapp_data_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Telegram.WebApp.sendData()."""
    if update.web_app_data:
        data_str = update.web_app_data.data
        try:
            order = json.loads(data_str)
        except Exception:
            order = {}

        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        order_number = get_next_order_number()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
        finalMsg = "–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Septic24:\n"
        finalMsg += f"–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_number}\n"
        finalMsg += f"–Ü–º'—è: {order.get('name','')}\n"
        finalMsg += f"–¢–µ–ª–µ—Ñ–æ–Ω: {order.get('phone','')}\n"
        finalMsg += f"–û–±–ª–∞—Å—Ç—å: {order.get('region','')}\n"
        finalMsg += f"–ê–¥—Ä–µ—Å–∞: {order.get('address','')}\n"

        serviceIndex = order.get('serviceIndex')
        if serviceIndex is not None:
            servicesTitles = [
                "–í–∏–∫–∞—á–∫–∞ –≤–∏–≥—Ä—ñ–±–Ω–∏—Ö —è–º",
                "–í–∏–∫–∞—á–∫–∞ –º—É–ª—É —á–∏ –ø—ñ—Å–∫—É",
                "–í–∏–∫–∞—á–∫–∞ —Å–µ–ø—Ç–∏–∫–∞",
                "–ü—Ä–æ—á–∏—Å—Ç–∫–∞ —Ç—Ä—É–±",
                "–í–∏–∫–∞—á–∫–∞ —Ç—É–∞–ª–µ—Ç—É"
            ]
            if 0 <= serviceIndex < len(servicesTitles):
                finalMsg += f"–ü–æ—Å–ª—É–≥–∞: {servicesTitles[serviceIndex]}\n"
            finalMsg += f"–î–æ–≤–∂–∏–Ω–∞ —Ç—Ä—É–±: {order.get('length','?')} –º\n"
            finalMsg += f"–î—ñ–∞–º–µ—Ç—Ä —Ç—Ä—É–±: {order.get('diameter','?')} –º–º\n"

        coords = order.get('coords')
        if coords and 'x' in coords and 'y' in coords:
            lat = coords['y']
            lon = coords['x']
            finalMsg += f"–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è: {lat:.5f}, {lon:.5f}\n"
            finalMsg += f"OpenStreetMap: https://www.openstreetmap.org/?mlat={lat}&mlon={lon}\n"

        user_id_str = order.get('user_id','')
        if user_id_str:
            finalMsg += f"UserID: {user_id_str}\n"

        now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open("orders.txt", "a", encoding="utf-8") as f:
            f.write(f"[{now_str}]\n{finalMsg}\n\n")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∞–¥–º–∏–Ω—É
        await context.bot.send_message(chat_id=CHAT_ID, text=finalMsg)

        # –ë–æ–Ω—É—Å-—Å—á—ë—Ç—á–∏–∫
        if user_id_str.isdigit():
            uid = int(user_id_str)
            bonus_counters[uid] = bonus_counters.get(uid, 0) + 1
            if bonus_counters[uid] > 5:
                bonus_counters[uid] = 1
            bonus_msg = (
                f"–î—è–∫—É—î–º–æ, –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ, –æ—á—ñ–∫—É–π—Ç–µ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫\n"
                f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {bonus_counters[uid]} / 5 ‚úÖ\n"
                "–ö–æ–∂–Ω–µ 5 –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∏–∂–∫–∞ 10%\n"
                "–í–∞—à–∞ –∑–Ω–∏–∂–∫–∞ 2%\n"
                f"–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_number}"
            )
            try:
                await context.bot.send_message(chat_id=uid, text=bonus_msg)
            except Exception:
                pass

        if update.effective_message:
            await update.effective_message.reply_text(
                f"–î—è–∫—É—î–º–æ, –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ, –æ—á—ñ–∫—É–π—Ç–µ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫\n"
                f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è {bonus_counters.get(int(user_id_str), 1)} / 5 ‚úÖ\n"
                "–ö–æ–∂–Ω–µ 5 –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–Ω–∏–∂–∫–∞ 10%\n"
                "–í–∞—à–∞ –∑–Ω–∏–∂–∫–∞ 2%\n"
                f"–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_number}"
            )

        print("–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", finalMsg)

# ======== –≠–Ω–¥–ø–æ–∏–Ω—Ç /save_order ========
async def save_order(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST-–∑–∞–ø—Ä–æ—Å–∞ /save_order, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Ö–æ–¥–∏—Ç –∏–∑ HTML."""
    try:
        data = await request.json()
        order_text = data.get("order", "")
        order_number = get_next_order_number()
        now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        order_entry = f"[{now_str}] –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {order_number}\n{order_text}\n\n"
        with open("orders.txt", "a", encoding="utf-8") as f:
            f.write(order_entry)
        return web.json_response({"status": "success", "order_number": order_number})
    except Exception as e:
        return web.json_response({"status": "error", "error": str(e)}, status=500)

# ======== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AIOHTTP + Bot ========
async def on_startup(app: web.Application) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ aiohttp-—Å–µ—Ä–≤–µ—Ä–∞."""
    print("on_startup: —Å–æ–∑–¥–∞—ë–º Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ‚Ä¶")
    application = ApplicationBuilder().token(TOKEN).build()
    app["telegram_app"] = application

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("orders", orders_history))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, webapp_data_handler))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    await application.initialize()

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling –∫–∞–∫ —Ñ–æ–Ω–æ–≤—É—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
    asyncio.create_task(application.start_polling())
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ (polling).")

async def on_cleanup(app: web.Application) -> None:
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ aiohttp-—Å–µ—Ä–≤–µ—Ä–∞."""
    print("on_cleanup: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ‚Ä¶")
    application = app["telegram_app"]
    await application.shutdown()
    await application.post_shutdown()
    print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

def create_app() -> web.Application:
    """–°–æ–∑–¥–∞—ë—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç aiohttp-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏."""
    http_app = web.Application()
    http_app.router.add_post('/save_order', save_order)
    http_app.on_startup.append(on_startup)
    http_app.on_cleanup.append(on_cleanup)
    return http_app

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚Äì –∑–∞–ø—É—Å–∫–∞–µ—Ç aiohttp –Ω–∞ Heroku."""
    port = int(os.environ.get("PORT", 8000))
    app = create_app()
    web.run_app(app, port=port)

if __name__ == "__main__":
    main()
