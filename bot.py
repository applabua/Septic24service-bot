import pytz
import tzlocal
# –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º tzlocal.get_localzone, —á—Ç–æ–±—ã –≤–æ–∑–≤—Ä–∞—â–∞–ª—Å—è pytz-–æ–±—ä–µ–∫—Ç
tzlocal.get_localzone = lambda: pytz.timezone("Europe/Kiev")

def patched_astimezone(tz):
    if tz is None:
        return None
    if not isinstance(tz, pytz.BaseTzInfo):
        try:
            if isinstance(tz, str):
                return pytz.timezone(tz)
            if hasattr(tz, 'key'):
                return pytz.timezone(tz.key)
            return pytz.timezone(str(tz))
        except Exception as e:
            raise TypeError('Only timezones from the pytz library are supported') from e
    return tz

import apscheduler.util
apscheduler.util.astimezone = patched_astimezone

import logging
import sys
import json
import os
from datetime import datetime
import threading

from flask import Flask, request, jsonify

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, Bot
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
)

print("–ë–æ—Ç –ø—Ä–∞—Ü—é—î...")

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
TOKEN = "7747992449:AAEqWIUYRlhbdiwUnXqCYV3ODpNX9VUsed8"
CHAT_ID = "2045410830"  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=TOKEN)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ (–µ–¥–∏–Ω–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è)
def get_next_order_number():
    try:
        with open("last_order_number.txt", "r", encoding="utf-8") as f:
            last_order = int(f.read().strip())
    except Exception:
        last_order = 0
    last_order += 1
    with open("last_order_number.txt", "w", encoding="utf-8") as f:
        f.write(str(last_order))
    return last_order

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ POST-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∑–∞–∫–∞–∑–∞–º–∏
flask_app = Flask(__name__)

@flask_app.route('/save_order', methods=['POST'])
def save_order():
    data = request.get_json()
    order_text = data.get("order", "")
    if not order_text:
        return jsonify({"status": "error", "error": "No order provided"}), 400
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    order_number = get_next_order_number()
    formatted_order_number = "‚Ññ" + str(order_number).zfill(5)
    # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–º–µ—Ä, —É–¥–∞–ª—è–µ–º –µ–≥–æ
    lines = order_text.split("\n")
    if lines and lines[0].startswith("‚Ññ"):
        lines.pop(0)
    final_order_text = f"{formatted_order_number}\n" + "\n".join(lines)
    
    now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open("orders.txt", "a", encoding="utf-8") as f:
        f.write(f"[{now_str}]\n{final_order_text}\n\n")
    
    try:
        bot.send_message(chat_id=CHAT_ID, text=final_order_text)
    except Exception as e:
        print("Error sending order to Telegram:", e)
    
    return jsonify({"status": "ok", "order_number": formatted_order_number})

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{now}] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.full_name} (ID: {user.id}) –≤–∏–∫–ª–∏–∫–∞–≤ /start")

    greeting_text = (
        "üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Septic24!\n\n"
        "–ú–∏ –Ω–∞–¥–∞—î–º–æ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ –ø–æ—Å–ª—É–≥–∏ –∑ –≤–∏–∫–∞—á—É–≤–∞–Ω–Ω—è –≤–∏–≥—Ä—ñ–±–Ω–∏—Ö —è–º, —Å–µ–ø—Ç–∏–∫—ñ–≤, –∫–∞–Ω–∞–ª—ñ–∑–∞—Ü—ñ–π "
        "—Ç–∞ –≤—É–ª–∏—á–Ω–∏—Ö —Ç—É–∞–ª–µ—Ç—ñ–≤ –ø–æ –≤—Å—ñ–π –£–∫—Ä–∞—ó–Ω—ñ.\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ –º—ñ–Ω—ñ‚Äë–¥–æ–¥–∞—Ç–æ–∫ —ñ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:"
    )
    
    web_app_url = "https://applabua.github.io/Septic24service/?user_id=" + str(user.id)
    keyboard = [[InlineKeyboardButton("–ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É‚ôªÔ∏è", web_app=WebAppInfo(url=web_app_url))]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    photo_url = "https://i.ibb.co/BH3bjrPP/IMG-9356.jpg"
    if update.message:
        await update.message.reply_photo(photo=photo_url, caption=greeting_text, reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /orders ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ orders.txt (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
async def orders_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != int(CHAT_ID):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω—å.")
        return
    try:
        with open("orders.txt", "r", encoding="utf-8") as f:
            content = f.read()
        if not content.strip():
            content = "–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å –ø–æ—Ä–æ–∂–Ω—è."
    except FileNotFoundError:
        content = "–§–∞–π–ª –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    await update.message.reply_text(content)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Telegram.WebApp.sendData
async def webapp_data_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.web_app_data:
        data_str = update.web_app_data.data
        try:
            order = json.loads(data_str)
        except Exception:
            order = {}

        order_number = get_next_order_number()
        formatted_order_number = "‚Ññ" + str(order_number).zfill(5)
        
        finalMsg = f"{formatted_order_number}\n–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Septic24:\n"
        finalMsg += f"–Ü–º'—è: {order.get('name','')}\n"
        finalMsg += f"–¢–µ–ª–µ—Ñ–æ–Ω: {order.get('phone','')}\n"
        finalMsg += f"–û–±–ª–∞—Å—Ç—å: {order.get('region','')}\n"
        finalMsg += f"–ê–¥—Ä–µ—Å–∞: {order.get('address','')}\n"

        serviceIndex = order.get('serviceIndex')
        if serviceIndex is not None:
            servicesTitles = [
                "–í–∏–∫–∞—á–∫–∞ –≤–∏–≥—Ä—ñ–±–Ω–∏—Ö —è–º",
                "–í–∏–∫–∞—á–∫–∞ –º—É–ª—É —á–∏ –ø—ñ—Å–∫—É",
                "–í–∏–∫–∞—á–∫–∞ —Å–µ–ø—Ç–∏–∫–∞",
                "–ü—Ä–æ—á–∏—Å—Ç–∫–∞ —Ç—Ä—É–±",
                "–í–∏–∫–∞—á–∫–∞ —Ç—É–∞–ª–µ—Ç—É"
            ]
            if 0 <= serviceIndex < len(servicesTitles):
                finalMsg += f"–ü–æ—Å–ª—É–≥–∞: {servicesTitles[serviceIndex]}\n"
            finalMsg += f"–î–æ–≤–∂–∏–Ω–∞ —Ç—Ä—É–±: {order.get('length','?')} –º\n"
            finalMsg += f"–î—ñ–∞–º–µ—Ç—Ä —Ç—Ä—É–±: {order.get('diameter','?')} –º–º\n"

        coords = order.get('coords')
        if coords and 'x' in coords and 'y' in coords:
            lat = coords['y']
            lon = coords['x']
            finalMsg += f"–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è: {lat:.5f}, {lon:.5f}\n"
            finalMsg += f"OpenStreetMap: https://www.openstreetmap.org/?mlat={lat}&mlon={lon}\n"

        user_id_str = order.get('user_id','')
        if user_id_str:
            finalMsg += f"UserID: {user_id_str}\n"

        now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open("orders.txt", "a", encoding="utf-8") as f:
            f.write(f"[{now_str}]\n{finalMsg}\n\n")

        await context.bot.send_message(chat_id=CHAT_ID, text=finalMsg)

        bonus = order_number % 5
        if bonus == 0:
            bonus = 5
        bonus_text = (
            f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {bonus}/5 ‚úÖ\n"
            "–ó–Ω–∏–∂–∫–∞ 2% üíß, –ö–æ–∂–Ω–µ 5 –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Äì –∑–Ω–∏–∂–∫–∞ 10% üéâ"
        )
        try:
            if user_id_str.isdigit():
                await context.bot.send_message(chat_id=int(user_id_str), text=bonus_text)
        except Exception:
            pass

        if update.effective_message:
            await update.effective_message.reply_text("–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫.")

        print("–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", finalMsg)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ Flask-—Å–µ—Ä–≤–µ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤ —Ä–µ–∂–∏–º–µ --run-both)
def run_flask():
    port = int(os.environ.get("PORT", 5000))
    flask_app.run(host="0.0.0.0", port=port)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞ (polling)
def main() -> None:
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("orders", orders_history))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, webapp_data_handler))
    application.run_polling()

if __name__ == "__main__":
    # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --bot-only, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –±–æ—Ç–∞
    if "--bot-only" in sys.argv:
        main()
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ --run-both, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ —Å–µ—Ä–≤–∏—Å–∞ –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    elif "--run-both" in sys.argv:
        threading.Thread(target=run_flask, daemon=True).start()
        main()
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º, —á—Ç–æ–±—ã –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Gunicorn) –Ω–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä.
        # Gunicorn –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é flask_app –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤–µ–±-–∑–∞–ø—Ä–æ—Å–æ–≤.
        pass
