import pytz
import tzlocal
# –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º tzlocal.get_localzone, —á—Ç–æ–±—ã –≤–æ–∑–≤—Ä–∞—â–∞–ª—Å—è pytz-–æ–±—ä–µ–∫—Ç
tzlocal.get_localzone = lambda: pytz.timezone("Europe/Kiev")

def patched_astimezone(tz):
    if tz is None:
        return None
    if not isinstance(tz, pytz.BaseTzInfo):
        try:
            if isinstance(tz, str):
                return pytz.timezone(tz)
            if hasattr(tz, 'key'):
                return pytz.timezone(tz.key)
            return pytz.timezone(str(tz))
        except Exception as e:
            raise TypeError('Only timezones from the pytz library are supported') from e
    return tz

import apscheduler.util
apscheduler.util.astimezone = patched_astimezone

import logging
import sys
import json
import os
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
)

print("–ë–æ—Ç –ø—Ä–∞—Ü—é—î...")

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
TOKEN = "7747992449:AAEqWIUYRlhbdiwUnXqCYV3ODpNX9VUsed8"
CHAT_ID = "2045410830"  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–∫–∞–∑–∞ (10 000 –Ω–æ–º–µ—Ä–æ–≤)
order_numbers = ["‚Ññ" + str(i).zfill(5) for i in range(1, 10001)]
# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (–≤ –ø–∞–º—è—Ç–∏)
orders_list = []

def get_next_order_number():
    global order_numbers
    if order_numbers:
        return order_numbers.pop(0)
    else:
        return None

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{now}] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.full_name} (ID: {user.id}) –≤–∏–∫–ª–∏–∫–∞–≤ /start")

    greeting_text = (
        "üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Septic24!\n\n"
        "–ú–∏ –Ω–∞–¥–∞—î–º–æ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ –ø–æ—Å–ª—É–≥–∏ –∑ –≤–∏–∫–∞—á—É–≤–∞–Ω–Ω—è –≤–∏–≥—Ä—ñ–±–Ω–∏—Ö —è–º, —Å–µ–ø—Ç–∏–∫—ñ–≤, –∫–∞–Ω–∞–ª—ñ–∑–∞—Ü—ñ–π "
        "—Ç–∞ –≤—É–ª–∏—á–Ω–∏—Ö —Ç—É–∞–ª–µ—Ç—ñ–≤ –ø–æ –≤—Å—ñ–π –£–∫—Ä–∞—ó–Ω—ñ.\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ –º—ñ–Ω—ñ‚Äë–¥–æ–¥–∞—Ç–æ–∫ —ñ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:"
    )
    
    web_app_url = "https://applabua.github.io/Septic24service/?user_id=" + str(user.id)
    keyboard = [[InlineKeyboardButton("–ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É‚ôªÔ∏è", web_app=WebAppInfo(url=web_app_url))]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    photo_url = "https://i.ibb.co/BH3bjrPP/IMG-9356.jpg"
    if update.message:
        await update.message.reply_photo(photo=photo_url, caption=greeting_text, reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /showorders ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
async def show_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != int(CHAT_ID):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –ø–µ—Ä–µ–≥–ª—è–¥—É –∑–∞–º–æ–≤–ª–µ–Ω—å.")
        return
    if not orders_list:
        await update.message.reply_text("–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
    else:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
        all_orders = "\n\n".join(orders_list)
        await update.message.reply_text(all_orders)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Telegram.WebApp.sendData
async def webapp_data_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.web_app_data:
        data_str = update.web_app_data.data
        try:
            order = json.loads(data_str)
        except Exception:
            order = {}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–∑ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        assigned_number = get_next_order_number()
        if not assigned_number:
            await context.bot.send_message(chat_id=update.effective_user.id, text="–í–∏–±–∞—á—Ç–µ, –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤ –∑–∞–º–æ–≤–ª–µ–Ω—å.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
        finalMsg = f"{assigned_number}\n–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ Septic24:\n"
        finalMsg += f"–Ü–º'—è: {order.get('name','')}\n"
        finalMsg += f"–¢–µ–ª–µ—Ñ–æ–Ω: {order.get('phone','')}\n"
        finalMsg += f"–û–±–ª–∞—Å—Ç—å: {order.get('region','')}\n"
        finalMsg += f"–ê–¥—Ä–µ—Å–∞: {order.get('address','')}\n"
    
        serviceIndex = order.get('serviceIndex')
        if serviceIndex is not None:
            servicesTitles = [
                "–í–∏–∫–∞—á–∫–∞ –≤–∏–≥—Ä—ñ–±–Ω–∏—Ö —è–º",
                "–í–∏–∫–∞—á–∫–∞ –º—É–ª—É —á–∏ –ø—ñ—Å–∫—É",
                "–í–∏–∫–∞—á–∫–∞ —Å–µ–ø—Ç–∏–∫–∞",
                "–ü—Ä–æ—á–∏—Å—Ç–∫–∞ —Ç—Ä—É–±",
                "–í–∏–∫–∞—á–∫–∞ —Ç—É–∞–ª–µ—Ç—É"
            ]
            if 0 <= serviceIndex < len(servicesTitles):
                finalMsg += f"–ü–æ—Å–ª—É–≥–∞: {servicesTitles[serviceIndex]}\n"
            if serviceIndex == 3:
                finalMsg += f"–î–æ–≤–∂–∏–Ω–∞ —Ç—Ä—É–±: {order.get('length','?')} –º\n"
                finalMsg += f"–î—ñ–∞–º–µ—Ç—Ä —Ç—Ä—É–±: {order.get('diameter','?')} –º–º\n"
            else:
                finalMsg += f"–û–±'—î–º —î–º–Ω–æ—Å—Ç—ñ: {order.get('volume','?')} –º¬≥\n"
                finalMsg += f"–í—ñ–¥—Å—Ç–∞–Ω—å –≤—ñ–¥ –ø–∞—Ä–∫–æ–≤–∫–∏ –¥–æ —î–º–Ω–æ—Å—Ç—ñ: {order.get('distance','?')} –º\n"
        
        coords = order.get('coords')
        if coords and 'x' in coords and 'y' in coords:
            lat = coords['y']
            lon = coords['x']
            finalMsg += f"–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è: {lat:.5f}, {lon:.5f}\n"
            finalMsg += f"OpenStreetMap: https://www.openstreetmap.org/?mlat={lat}&mlon={lon}\n"

        if order.get('user_id'):
            finalMsg += f"UserID: {order.get('user_id')}\n"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
        orders_list.append(finalMsg)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await context.bot.send_message(chat_id=CHAT_ID, text=finalMsg)

        # –í—ã—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞
        try:
            num = int(assigned_number[1:])
        except Exception:
            num = 0
        if num % 5 == 0:
            bonus_text = "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è 5/5 ‚úÖ\n–ó–Ω–∏–∂–∫–∞ 10% üéâ"
        else:
            bonus = num % 5
            bonus_text = f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {bonus}/5 ‚úÖ\n–ó–Ω–∏–∂–∫–∞ 2% üíß"
        try:
            if str(order.get('user_id')).isdigit():
                await context.bot.send_message(chat_id=int(order.get('user_id')), text=bonus_text)
        except Exception:
            pass

        if update.effective_message:
            await update.effective_message.reply_text("–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫.")

        print("–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", finalMsg)

def main() -> None:
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("showorders", show_orders))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, webapp_data_handler))
    application.run_polling()

if __name__ == "__main__":
    main()
