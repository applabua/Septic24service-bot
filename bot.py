import pytz
import tzlocal
# –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º tzlocal.get_localzone, —á—Ç–æ–±—ã –≤–æ–∑–≤—Ä–∞—â–∞–ª—Å—è pytz-–æ–±—ä–µ–∫—Ç
tzlocal.get_localzone = lambda: pytz.timezone("Europe/Kiev")

def patched_astimezone(tz):
    if tz is None:
        return None
    if not isinstance(tz, pytz.BaseTzInfo):
        try:
            if isinstance(tz, str):
                return pytz.timezone(tz)
            if hasattr(tz, 'key'):
                return pytz.timezone(tz.key)
            return pytz.timezone(str(tz))
        except Exception as e:
            raise TypeError('Only timezones from the pytz library are supported') from e
    return tz

import apscheduler.util
apscheduler.util.astimezone = patched_astimezone

import logging
import sys
import json
import os
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTTP-—Å–µ—Ä–≤–µ—Ä–∞
import asyncio
from aiohttp import web

print("–ë–æ—Ç –ø—Ä–∞—Ü—é—î...")

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
TOKEN = "7747992449:AAEqWIUYRlhbdiwUnXqCYV3ODpNX9VUsed8"
CHAT_ID = "2045410830"  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –±–æ–Ω—É—Å-—Å—á—ë—Ç—á–∏–∫–æ–≤ (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏)
bonus_counters = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
def get_next_order_number():
    order_file = "order_number.txt"
    if os.path.exists(order_file):
        try:
            with open(order_file, "r", encoding="utf-8") as f:
                last_number = int(f.read().strip())
        except Exception:
            last_number = 0
    else:
        last_number = 0
    new_number = last_number + 1
    with open(order_file, "w", encoding="utf-8") as f:
        f.write(str(new_number))
    return f"‚Ññ{new_number:05d}"

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è WebApp
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{now}] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.full_name} (ID: {user.id}) –≤–∏–∫–ª–∏–∫–∞–≤ /start")
    
    greeting_text = (
        "üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Septic24!\n\n"
        "–ú–∏ –Ω–∞–¥–∞—î–º–æ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ –ø–æ—Å–ª—É–≥–∏ –∑ –≤–∏–∫–∞—á—É–≤–∞–Ω–Ω—è –≤–∏–≥—Ä—ñ–±–Ω–∏—Ö —è–º, —Å–µ–ø—Ç–∏–∫—ñ–≤, –∫–∞–Ω–∞–ª—ñ–∑–∞—Ü—ñ–π "
        "—Ç–∞ –≤—É–ª–∏—á–Ω–∏—Ö —Ç—É–∞–ª–µ—Ç—ñ–≤ –ø–æ –≤—Å—ñ–π –£–∫—Ä–∞—ó–Ω—ñ.\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ –º—ñ–Ω—ñ‚Äë–¥–æ–¥–∞—Ç–æ–∫ —ñ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:"
    )
    
    # URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–µ—Ä–µ–¥–∞—á–µ–π user_id
    web_app_url = "https://applabua.github.io/Septic24service/?user_id=" + str(user.id)
    keyboard = [[InlineKeyboardButton("–ó–∞–º–æ–≤–∏—Ç–∏ –ø–æ—Å–ª—É–≥—É‚ôªÔ∏è", web_app=WebAppInfo(url=web_app_url))]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    photo_url = "https://i.ibb.co/BH3bjrPP/IMG-9356.jpg"
    if update.message:
        await update.message.reply_photo(photo=photo_url, caption=greeting_text, reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ /orders ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ orders.txt (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
async def orders_history(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != int(CHAT_ID):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω—å.")
        return
    try:
        with open("orders.txt", "r", encoding="utf-8") as f:
            content = f.read()
        if not content.strip():
            content = "–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å –ø–æ—Ä–æ–∂–Ω—è."
    except FileNotFoundError:
        content = "–§–∞–π–ª –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é –∑–∞–º–æ–≤–ª–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    await update.message.reply_text(content)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Telegram.WebApp.sendData
async def webapp_data_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.web_app_data:
        data_str = update.web_app_data.data
        try:
            order = json.loads(data_str)
        except Exception:
            order = {}

        order_number = get_next_order_number()
        finalMsg = f"–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_number} –≤—ñ–¥ Septic24:\n"
        finalMsg += f"–Ü–º'—è: {order.get('name','')}\n"
        finalMsg += f"–¢–µ–ª–µ—Ñ–æ–Ω: {order.get('phone','')}\n"
        finalMsg += f"–û–±–ª–∞—Å—Ç—å: {order.get('region','')}\n"
        finalMsg += f"–ê–¥—Ä–µ—Å–∞: {order.get('address','')}\n"

        serviceIndex = order.get('serviceIndex')
        if serviceIndex is not None:
            servicesTitles = [
                "–í–∏–∫–∞—á–∫–∞ –≤–∏–≥—Ä—ñ–±–Ω–∏—Ö —è–º",
                "–í–∏–∫–∞—á–∫–∞ –º—É–ª—É —á–∏ –ø—ñ—Å–∫—É",
                "–í–∏–∫–∞—á–∫–∞ —Å–µ–ø—Ç–∏–∫–∞",
                "–ü—Ä–æ—á–∏—Å—Ç–∫–∞ —Ç—Ä—É–±",
                "–í–∏–∫–∞—á–∫–∞ —Ç—É–∞–ª–µ—Ç—É"
            ]
            if 0 <= serviceIndex < len(servicesTitles):
                finalMsg += f"–ü–æ—Å–ª—É–≥–∞: {servicesTitles[serviceIndex]}\n"
            finalMsg += f"–î–æ–≤–∂–∏–Ω–∞ —Ç—Ä—É–±: {order.get('length','?')} –º\n"
            finalMsg += f"–î—ñ–∞–º–µ—Ç—Ä —Ç—Ä—É–±: {order.get('diameter','?')} –º–º\n"

        coords = order.get('coords')
        if coords and 'x' in coords and 'y' in coords:
            lat = coords['y']
            lon = coords['x']
            finalMsg += f"–ì–µ–æ–ª–æ–∫–∞—Ü—ñ—è: {lat:.5f}, {lon:.5f}\n"
            finalMsg += f"OpenStreetMap: https://www.openstreetmap.org/?mlat={lat}&mlon={lon}\n"

        user_id_str = order.get('user_id','')
        if user_id_str:
            finalMsg += f"UserID: {user_id_str}\n"

        now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open("orders.txt", "a", encoding="utf-8") as f:
            f.write(f"[{now_str}]\n{finalMsg}\n\n")

        await context.bot.send_message(chat_id=CHAT_ID, text=finalMsg)

        if user_id_str.isdigit():
            uid = int(user_id_str)
            bonus_counters[uid] = bonus_counters.get(uid, 0) + 1
            if bonus_counters[uid] > 5:
                bonus_counters[uid] = 1
            bonus_text = (
                f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {bonus_counters[uid]} / 5 ‚úÖ\n"
                "–†—É—Ö–∞—î–º–æ—Å—å –¥–æ –±–æ–Ω—É—Å—É! –ö–æ–∂–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–±–ª–∏–∂–∞—î –≤–∞—Å –¥–æ —â–µ –±—ñ–ª—å—à–æ—ó –≤–∏–≥–æ–¥–∏ üéØ\n\n"
                "üíß –ù–∞ –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥—ñ—î –∑–Ω–∏–∂–∫–∞ 2% ‚Äî –±–æ –º–∏ —Ü—ñ–Ω—É—î–º–æ –∫–æ–∂–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞.\n"
                "üåü –ê –≤–∂–µ –Ω–∞ –ø‚Äô—è—Ç–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ ‚Äî –¥–∞—Ä—É—î–º–æ 10% –∑–Ω–∏–∂–∫–∏!\n\n"
                "–ù–∞–∫–æ–ø–∏—á—É–π—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –∞ –º–∏ –ø–æ–¥–±–∞—î–º–æ –ø—Ä–æ —á–∏—Å—Ç–æ—Ç—É —Ç–∞ –≤–∞—à –∫–æ–º—Ñ–æ—Ä—Ç.\n"
                "Septic24 ‚Äî –∫–æ–ª–∏ –≤—Å–µ –ø—Ä–∞—Ü—é—î —á—ñ—Ç–∫–æ —ñ –∑ —Ç—É—Ä–±–æ—Ç–æ—é üíô"
            )
            try:
                await context.bot.send_message(chat_id=uid, text=bonus_text)
            except Exception:
                pass

        if update.effective_message:
            await update.effective_message.reply_text("–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫.")

        print("–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", finalMsg)

# HTTP-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ WebApp)
async def save_order(request):
    try:
        data = await request.json()
        order_text = data.get("order", "")
        order_number = get_next_order_number()
        order_text = f"–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è {order_number} –≤—ñ–¥ Septic24:\n" + order_text
        now_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open("orders.txt", "a", encoding="utf-8") as f:
            f.write(f"[{now_str}]\n{order_text}\n\n")
        # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        context: ContextTypes.DEFAULT_TYPE = request.app['context']
        await context.bot.send_message(chat_id=CHAT_ID, text=order_text)
        return web.json_response({"status": "ok", "order_number": order_number})
    except Exception as e:
        return web.json_response({"status": "error", "error": str(e)})

def main() -> None:
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("orders", orders_history))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, webapp_data_handler))
    
    async def init_aiohttp_app():
        app = web.Application()
        app.add_routes([web.post('/save_order', save_order)])
        # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–µ–º—É –∏–∑ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
        app['context'] = application
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', 8080)
        await site.start()
    
    async def main_async():
        await init_aiohttp_app()
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling Telegram-–±–æ—Ç–∞
        await application.run_polling()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π event loop –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main_async())

if __name__ == "__main__":
    main()
